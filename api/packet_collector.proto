syntax = 'proto3';


option go_package = "./pkg/api";


/**
 * Collect mode
 */
enum CollectMode {
  UNKNOWN_MODE = 0;
  PACKET = 1;
  PACKET_ID = 2;
}


/**
 * eBPF Hook point
 */
enum EBPFHook {
  UNKNOWN_HOOK = 0;
  XDP = 1;
  TC_INGRESS = 2;
  TC_EGRESS = 3;
  LWT_IN = 4;
  LWT_XMIT = 5;
  LWT_OUT = 6;
  LWT_SEG6LOCAL = 7;
}


/**
 * Packet protocol
 */
 enum PacketProtocol {
  UNKNOWN_PROTOCOL = 0;
  PROTOCOL_ETH = 1;
  PROTOCOL_IPV6 = 2;
}


/**
 * PKTID EXTHDR
 */
 enum PktIdExtHdr {
  UNKNOWN_EXTHDR = 0;
  EXTHDR_ROUTING = 1;
  EXTHDR_HOPBYHOP = 2;
  EXTHDR_DESTINATION = 3;
}


/**
 * metadata for Netfilter
 */
message NetFilterInfo {
  string hookpoint = 1;
}


/**
 * metadata for eBPF
 */
message EBPFInfo {
  EBPFHook hookpoint = 1;
}


/**
 * Packet and id (for no id packet)
 */
message PacketAndId {
  bytes packet = 1;
  uint64 packet_id = 2;
}


/**
 * packet
 */
message PacketInfo {
  // packet data
  oneof data {
    bytes packet = 1;
    uint64 packet_id = 2;
    PacketAndId packet_and_id = 3;
  }
  // node name (id)
  uint32 node_id = 5;
  // packet sniff timestamp
  double timestamp = 6;

  // metadata
  oneof metadata {
    NetFilterInfo netfilterInfo = 10;
    EBPFInfo ebpfInfo = 11;
  }

  // packet data protocol
  PacketProtocol packet_protocol = 20;
  // Target IPv6 Ext protocol 
  PktIdExtHdr pktid_exthdr = 21;
}


/**
 * Agent setting
 */
message PollSettingRequest {
  uint32 node_id = 2;
  uint32 node_id_length = 3;
  uint32 counter_length = 4;
}


/**
 * eBPF Program Info
 */
message EbpfProgramInfo {
  EBPFHook hook = 1;
  uint64 fd = 2;
}


/**
 * Setting Reply
 */
message PollSettingReply {}


/**
 * Packet Request
 */
message PacketInfoRequest {}

/**
 * Packet Info Reqly
 */
message PacketInfoReply {
  repeated PacketInfo packet_infos = 1;
}


/**
 * eBPF Program Info Request
 */
message EbpfProgramInfoRequest {}


/**
 * eBPF Program Info Reply
 */
message EbpfProgramInfoReply {
  repeated EbpfProgramInfo programs = 1;
}


/**
 * NotifyPacket Request
 */
message PacketInfoStreamRequest {
  bool capture_all_packets = 1;
  uint32 node_id = 2;
  uint32 node_id_length = 3;
  uint32 counter_length = 4;
}


/**
 * Packet Collector
 */
service PacketCollectService {
  rpc SetPoll(PollSettingRequest) returns (PollSettingReply) {}
  rpc GetPacketInfo(PacketInfoRequest) returns (PacketInfoReply) {}
  rpc GetEbpfProgramInfo(EbpfProgramInfoRequest) returns (EbpfProgramInfoReply) {}
  rpc GetPacketInfoStream(PacketInfoStreamRequest) returns (stream PacketInfo) {}
}
